概述
会话跟踪是Web程序中常用技术，用来跟踪用户整个会话。常的会话跟踪技术Cookie与Session。

Cookie通过在客户端记录信息确定用户身份，Session通过在服务器端记录信息确定用户身份。

一、Cookie机制
用户使用浏览器访问一个支持Cookie的网站时，用户提交个人信息至服务器；

接着，服务器在向客户端回传相应的超文本的同时也会发回这些个人信息，这些信息存放于HTTP响应头（Response Header）；

当客户端浏览器接收到服务器的响应后，浏览器会将这些信息存放在一个统一的位置，Windows操作系统可以从： [系统盘]:\Documents and Settings[用户名]\Cookies目录中找到存储的Cookie；

客户端再向服务器发送请求时，会把相应的Cookie再次发回服务器。此时Cookie信息存放在HTTP请求头（Request Header）中。

后续请求自动发送这个cookie到服务器端，直到这个cookie过期。

Cookie不可跨域

根据Cookie规范，浏览器访问Google只会携带Google的Cookie，不会携带Baidu的Cookie。Google也只能操作Google的Cookie，不能操作Baidu的Cookie。

Cookie在客户端由浏览器管理，浏览器保证Google只会操作Google的Cookie，而不会操作Baidu的Cookie，从而保证用户隐私安全。

浏览器判断一个网站是否能操作另一个网站Cookie的依据是域名。Google与Baidu的域名不一样，因此Google不能操作Baidu的Cookie。

cookie的设置

Cookie功能需要浏览器的支持。如果浏览器不支持Cookie（如大部分手机中的浏览器）或者把Cookie禁用了，Cookie功能就会失效。

cookie的属性

1）有效时间maxAge

Cookie失效的时间，单位秒。

如果为正数，则该Cookie在大于maxAge秒之后失效。浏览器会将maxAge为正数的Cookie持久化，即写到对应的Cookie文件中。无论客户关闭了浏览器还是电脑，只要还在maxAge秒之前，登录网站时该Cookie仍然有效。

如果为负数，该Cookie为临时Cookie，关闭浏览器即失效，浏览器也不会以任何形式保存该Cookie。

如果为0，表示删除该Cookie。

如果为Integer.MAX_VALUE，表示Cookie信息将永远有效。

默认为–1。

2）安全设置secure

boolean secure：该Cookie是否仅被使用安全协议传输。

3）路径path

如果设置为“/sessionWeb/”，则只有contextPath为“/sessionWeb”的程序可以访问该Cookie。

如果设置为“/”，则本域名下contextPath都可以访问该Cookie。注意最后一个字符必须为“/”。

4）域名domain

String domain：可以访问该Cookie的域名。

如果设置为“.google.com”，则所有以“google.com”结尾的域名都可以访问该Cookie。注意第一个字符必须为“.”。

5）用处说明comment

String comment：该Cookie的用处说明。浏览器显示Cookie信息的时候显示该说明。

Cookie的修改、删除

Cookie操作方法只有一个添加操作add(Cookie cookie)，而且Cookie一旦创建，名称便不可更改。

Cookie只能使用一个同名的Cookie来覆盖原来的Cookie，达到修改的目的。删除时只需把maxAge修改为0 即可。

修改、删除Cookie时，新建的Cookie除value、maxAge之外的所有属性，例如name、path、domain等，都要与原Cookie完全一样。

否则，浏览器将视为两个不同的Cookie不予覆盖，导致修改、删除失败。

安全机制

由于JavaScript能够任意地读写Cookie，但是无法使用JavaScript程序去窥探用户在其他网站的Cookie。W3C组织早就意识到JavaScript对Cookie的读写所带来的安全隐患并加以防备了，

W3C标准的浏览器会阻止JavaScript读写任何不属于自己网站的Cookie。换句话说，A网站的JavaScript程序读写B网站的Cookie不会有任何结果。

注意：

由于浏览器每次请求服务器都会携带Cookie，因此Cookie内容不宜过多，否则影响速度。Cookie的内容应该少而精。

二、Session机制
Session是服务器端一种记录客户端状态的机制，客户端浏览器访问服务器的时候，服务器把客户端信息以某种形式记录在服务器上。

客户端浏览器再次访问时只需要从该Session中查找该客户的状态就可以了。

举例

如果说Cookie机制是通过检查客户身上的“通行证”来确定客户身份的话，那么Session机制就是通过检查服务器上的“客户明细表”来确认客户身份。

Session相当于程序在服务器上建立的一份客户档案，客户来访的时候只需要查询客户档案表就可以了。

生命周期

Session在用户第一次访问服务器的时候自动创建。Session生成后，只要用户继续访问，服务器就会更新Session的最后访问时间，并维护该Session。

用户每访问服务器一次，无论是否读写Session，服务器都认为该用户的Session“活跃（active）”了一次。

由于会有越来越多的用户访问服务器，Session也会越来越多。为防止内存溢出，服务器会把长时间内没有活跃的Session从内存删除。

这个时间就是Session的超时时间。如果超过了超时时间没访问过服务器，Session就自动失效了。

用户识别机制

Session保存在服务器，对客户端是透明的，它的正常运行仍然需要客户端浏览器的支持。这是因为Session需要使用Cookie作为识别标志。

HTTP协议是无状态的，Session不能依据HTTP连接来判断是否为同一客户，因此服务器向客户端浏览器发送一个名为JSESSIONID的Cookie，

它的值为该Session的id（也就是HttpSession.getId()的返回值）。Session依据该Cookie来识别是否为同一用户。

URL地址重写

客户端浏览器将Cookie功能禁用，或者不支持Cookie怎么办？例如，绝大多数的手机浏览器都不支持Cookie。Java Web提供了另一种解决方案：URL地址重写。

URL地址重写的原理是将该用户Session的id信息重写到URL地址中。服务器能够解析重写后的URL获取Session的id。这样即使客户端不支持Cookie，也可以使用Session来记录用户状态。

关闭浏览器session不会被清除

浏览器不会主动在关闭之前通知服务器它将要关闭，因此服务器根本不会有机会知道浏览器已经关闭。对session来说，除非程序通知服务器删除一个session，否则服务器会一直保留。

大部分session机制都使用会话cookie来保存session id，该Cookie为服务器自动生成的，它的maxAge属性一般为–1，表示仅当前浏览器内有效，并且各浏览器窗口间不共享，关闭浏览器就会失效。

关闭浏览器后这个 session id就消失了，再次连接服务器时也就无法找到原来的session。

如果服务器设置的cookie被保存到硬盘上，或者使用某种手段改写浏览器发出的HTTP请求头，把原来的session id发送给服务器，则再次打开浏览器仍然能够找到原来的session。

注意

Session保存在服务器端，为了速高的存取，服务器一般把Session放在内存里。每个用户都会有一个独立的Session。

如果Session内容过于复杂，当大量客户访问服务器时可能会导致内存溢出。因此，Session里的信息应该尽量精简。

三、Cookie与Session的区别
1）cookie数据存放在客户的浏览器上，session数据放在服务器上；

2）cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗，考虑到安全应当使用session；

3）session会在一定时间内保存在服务器上。当访问增多，比较占用服务器性能。考虑到服务器性能，应使用COOKIE；

4）单个cookie在客户端的限制是3K，就是一个站点在客户端存放的COOKIE不能超过3K；

四、Cookie与Session的联系
Cookie和Session的方案虽然分别属于客户端和服务端，但是服务端的session的实现对客户端的cookie有依赖关系的，

服务端执行session机制时候会生成session的id值，这个id值会发送给客户端，客户端每次请求都会把这个id值放到http请求的头部发送给服务端，

而这个id值在客户端会保存下来，保存的容器就是cookie，因此当我们完全禁掉浏览器的cookie的时候，服务端的session也会不能正常使用
